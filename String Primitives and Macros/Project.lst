Microsoft (R) Macro Assembler Version 14.29.30147.0	    01/23/23 13:31:07
Project 6		(Proj6_millsamu.asm		     Page 1 - 1


				TITLE Project 6		(Proj6_millsamu.asm)

				; Author: Samuel Miller
				; Last Modified: November 25th, 2022
				; OSU email address: millsamu@oregonstate.edu
				; Course number/section:   CS271 Section 16919
				; Project Number:   6      Due Date: December 4th, 2022
				; Description: This is project 6. It prompts the user to enter 10 unsigned integers that can fit
				; in a 32-bit register. If the input doesn't match, it reprompts the user for a number. When 10 numbers
				; have been entered it displays a list of the valid numbers, the sum, and the average
				; followed by a farewell message

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------------------------------- 
				; Name: mDisplayString
				; 
				; prints an array or string
				; 
				; Preconditions: do not use eax, ecx, esi as arguments 
				; 
				; Receives: 
				; string = array address 
				; --------------------------------------------------------------------------------- 
				mDisplayString	MACRO	string
					PUSH	EDX				;Save EDX register
					MOV		EDX,  OFFSET string
					CALL	WriteString
					POP		EDX				;Restore EDX
				ENDM

				; --------------------------------------------------------------------------------- 
				; Name: mGetString
				; 
				; Gets user input and stores that input as a string 
				; 
				; Preconditions: do not use eax, ecx, esi as arguments 
				; 
				; Receives: 
				; prompt = string to get user input
				; input = string to store user input
				; stringLimit = the length of characters to store
				; length = the actual length of the string
				; 
				; returns: input = generated string address 
				; --------------------------------------------------------------------------------- 
				mGetString	MACRO		prompt, input, stringLimit, length
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					MOV		EDX, prompt
					CALL	WriteString
					MOV		EDX, input
					MOV		ECX, stringLimit
					CALL	ReadString
					MOV		length, EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

 = 0000000C			MAX_LENGTH = 12 ; create a max length long enough to set overflow flag and filter out large numbers
 = 0000000A			COUNT = 10

 00000000			.data
 00000000 50 72 6F 6A 65	intro1			BYTE	"Project 6: Data validation the hard way with MACROs and string primitives.",13,10
	   63 74 20 36 3A
	   20 44 61 74 61
	   20 76 61 6C 69
	   64 61 74 69 6F
	   6E 20 74 68 65
	   20 68 61 72 64
	   20 77 61 79 20
	   77 69 74 68 20
	   4D 41 43 52 4F
	   73 20 61 6E 64
	   20 73 74 72 69
	   6E 67 20 70 72
	   69 6D 69 74 69
	   76 65 73 2E 0D
	   0A
 0000004C  57 72 69 74 74					BYTE	"Written by Samuel Miller.",13,10,13,10
	   65 6E 20 62 79
	   20 53 61 6D 75
	   65 6C 20 4D 69
	   6C 6C 65 72 2E
	   0D 0A 0D 0A
 00000069  50 6C 65 61 73					BYTE	"Please enter 10 signed decimal integers.",13,10
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A
 00000093  45 76 65 72 79					BYTE	"Every number must fit in a 32-bit register.",13,10
	   20 6E 75 6D 62
	   65 72 20 6D 75
	   73 74 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
 000000C0  41 66 74 65 72					BYTE	"After the numbers are entered the list, sum, and average value will be displayed.",13,10,13,10,0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 61 72
	   65 20 65 6E 74
	   65 72 65 64 20
	   74 68 65 20 6C
	   69 73 74 2C 20
	   73 75 6D 2C 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 20 77 69
	   6C 6C 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   2E 0D 0A 0D 0A
	   00
 00000116 45 6E 74 65 72	prompt1			BYTE	"Enter a signed decimal integer: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   3A 20 00
 00000137 49 6E 76 61 6C	error1			BYTE	"Invalid input. Please enter a signed number that fits in a 32-bit register",13,10
	   69 64 20 69 6E
	   70 75 74 2E 20
	   50 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 74
	   68 61 74 20 66
	   69 74 73 20 69
	   6E 20 61 20 33
	   32 2D 62 69 74
	   20 72 65 67 69
	   73 74 65 72 0D
	   0A
 00000183  54 72 79 20 61					BYTE	"Try again: ",0
	   67 61 69 6E 3A
	   20 00
 0000018F 54 68 65 73 65	list1			BYTE	"These are the valid numbers you entered:",13,10,0
	   20 61 72 65 20
	   74 68 65 20 76
	   61 6C 69 64 20
	   6E 75 6D 62 65
	   72 73 20 79 6F
	   75 20 65 6E 74
	   65 72 65 64 3A
	   0D 0A 00
 000001BA 2C 20 00		comma			BYTE	", ",0
 000001BD 54 68 65 20 73	sum1			BYTE	"The sum: ",0
	   75 6D 3A 20 00
 000001C7 54 68 65 20 74	average1		BYTE	"The truncated average: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 3A 20 00
 000001DF 54 68 61 6E 6B	farewell		BYTE	"Thank you, goodbye.",13,10,0
	   20 79 6F 75 2C
	   20 67 6F 6F 64
	   62 79 65 2E 0D
	   0A 00
 000001F5  0000000A [		numList			DWORD	COUNT DUP(?)	; list to hold the ten values
	    00000000
	   ]
 0000021D  0000000C [		numString		BYTE	MAX_LENGTH DUP(?) ;array to hold the reversed integer as a string
	    00
	   ]
 00000229  0000000C [		numStringRev	BYTE	MAX_LENGTH DUP(?) ;array to reverse the reversed string
	    00
	   ]
 00000235  0000000C [		numInput		BYTE	MAX_LENGTH DUP(?) 
	    00
	   ]
 00000241 00000000		lengthInput		DWORD	0
 00000245 00000000		sign			DWORD	?
 00000249  0000000C [		sumString		BYTE	MAX_LENGTH DUP (?)
	    00
	   ]
 00000255  0000000C [		sumStringRev	BYTE	MAX_LENGTH DUP (?)
	    00
	   ]
 00000261 00000000		sumInt			DWORD	?
 00000265  0000000C [		avgString		BYTE	MAX_LENGTH DUP (?)
	    00
	   ]
 00000271  0000000C [		avgStringRev	BYTE	MAX_LENGTH DUP (?)
	    00
	   ]
 0000027D 00000000		avgInt			DWORD	?

 00000000			.code
 00000000			main PROC

				; display intro message
				mDisplayString		intro1
 00000000  52		     1		PUSH	EDX				;Save EDX register
 00000001  BA 00000000 R     1		MOV		EDX,  OFFSET intro1
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX				;Restore EDX

				; loop to fill numList with 10 valid signed 32-bit integers
 0000000C  B9 0000000A		MOV ECX,	COUNT
 00000011  BF 000001F5 R	MOV EDI,	OFFSET numList
 00000016			_fillLoop:
 00000016  51				PUSH	ECX

 00000017  68 000001F5 R		PUSH	OFFSET numList
 0000001C  68 00000245 R		PUSH	OFFSET sign
 00000021  68 00000137 R		PUSH	OFFSET error1
 00000026  68 00000241 R		PUSH	OFFSET lengthInput
 0000002B  68 00000235 R		PUSH	OFFSET numInput
 00000030  68 00000116 R		PUSH	OFFSET prompt1
 00000035  E8 00000184			CALL	ReadVal

 0000003A  83 C7 04			ADD		EDI, 4
 0000003D  59				POP		ECX
 0000003E  E2 D6			LOOP	_fillLoop

				; display string announcing the valid nums
 00000040  E8 00000000 E	CALL	CrLf
				mDisplayString		list1
 00000045  52		     1		PUSH	EDX				;Save EDX register
 00000046  BA 0000018F R     1		MOV		EDX,  OFFSET list1
 0000004B  E8 00000000 E     1		CALL	WriteString
 00000050  5A		     1		POP		EDX				;Restore EDX

				; display the valid nums with a loop
 00000051  B9 0000000A		MOV		ECX, COUNT
 00000056  BE 000001F5 R	MOV		ESI, OFFSET numList
 0000005B  BF 0000021D R	MOV		EDI, OFFSET numString
 00000060			_displayNums:
 00000060  51				PUSH	ECX

 00000061  68 00000229 R		PUSH	OFFSET numStringRev
 00000066  68 0000021D R		PUSH	OFFSET numString
 0000006B  68 000001F5 R		PUSH	OFFSET numList
 00000070  E8 00000239			CALL	WriteVal
					; display valid numString followed by a comma and a space
					mDisplayString		numStringRev
 00000075  52		     1		PUSH	EDX				;Save EDX register
 00000076  BA 00000229 R     1		MOV		EDX,  OFFSET numStringRev
 0000007B  E8 00000000 E     1		CALL	WriteString
 00000080  5A		     1		POP		EDX				;Restore EDX
					mDisplayString		comma
 00000081  52		     1		PUSH	EDX				;Save EDX register
 00000082  BA 000001BA R     1		MOV		EDX,  OFFSET comma
 00000087  E8 00000000 E     1		CALL	WriteString
 0000008C  5A		     1		POP		EDX				;Restore EDX
					; empty the numString array so a new value can be inputted
 0000008D  33 C0			XOR		EAX, EAX
 0000008F  BF 0000021D R		MOV		EDI, OFFSET numString 
 00000094  B9 0000000C			MOV		ECX, LENGTH numString
 00000099  FC				CLD
 0000009A  F3/ AA			REP		STOSB
					; empty the numStringRev array so a new value can be inputted
 0000009C  33 C0			XOR		EAX, EAX
 0000009E  BF 00000229 R		MOV		EDI, OFFSET numStringRev 
 000000A3  B9 0000000C			MOV		ECX, LENGTH numStringRev
 000000A8  FC				CLD
 000000A9  F3/ AA			REP		STOSB
					
 000000AB  59				POP		ECX
 000000AC  49				DEC		ECX
 000000AD  83 F9 02			CMP		ECX, 2
 000000B0  7D AE			JGE		_displayNums
						
				; write the last value in the array with no comma
 000000B2  68 00000229 R	PUSH	OFFSET numStringRev
 000000B7  68 0000021D R	PUSH	OFFSET numString
 000000BC  68 000001F5 R	PUSH	OFFSET numList
 000000C1  E8 000001E8		CALL	WriteVal

				mDisplayString		numStringRev
 000000C6  52		     1		PUSH	EDX				;Save EDX register
 000000C7  BA 00000229 R     1		MOV		EDX,  OFFSET numStringRev
 000000CC  E8 00000000 E     1		CALL	WriteString
 000000D1  5A		     1		POP		EDX				;Restore EDX
 000000D2  E8 00000000 E	CALL	CrLf

				; Add the values of the array
 000000D7  BE 000001F5 R	MOV		ESI, OFFSET numList
 000000DC  B8 00000000		MOV		EAX, 0
 000000E1  B9 0000000A		MOV		ECX, COUNT
 000000E6			_sum:
 000000E6  8B 1E			MOV		EBX, [ESI]
 000000E8  03 C3			ADD		EAX, EBX
 000000EA  83 C6 04			ADD		ESI, 4
 000000ED  49				DEC		ECX
 000000EE  83 F9 00			CMP		ECX, 0
 000000F1  7F F3			JG		_sum

 000000F3  A3 00000261 R	MOV		sumInt, EAX
 000000F8  BE 00000261 R	MOV		ESI, offset sumInt

				; turn the sum into a string
 000000FD  68 00000255 R	PUSH	OFFSET sumStringRev
 00000102  68 00000249 R	PUSH	OFFSET sumString
 00000107  68 00000261 R	PUSH	OFFSET sumInt
 0000010C  E8 0000019D		CALL	WriteVal

				; display the sum
				mDisplayString		sum1
 00000111  52		     1		PUSH	EDX				;Save EDX register
 00000112  BA 000001BD R     1		MOV		EDX,  OFFSET sum1
 00000117  E8 00000000 E     1		CALL	WriteString
 0000011C  5A		     1		POP		EDX				;Restore EDX
				mDisplayString		sumStringRev
 0000011D  52		     1		PUSH	EDX				;Save EDX register
 0000011E  BA 00000255 R     1		MOV		EDX,  OFFSET sumStringRev
 00000123  E8 00000000 E     1		CALL	WriteString
 00000128  5A		     1		POP		EDX				;Restore EDX
 00000129  E8 00000000 E	CALL	CrLf

				; get the average. If the sum is negative, temporarily changes to positive to avoid complications
				; with division before it is changed back to negative in order to be passed to WriteVal
 0000012E  A1 00000261 R	MOV		EAX, sumInt
 00000133  83 F8 00		CMP		EAX, 0
 00000136  7C 02		JL		_negativeSum
 00000138  EB 0E		JMP		_positiveSum

				; temporarily changes sum to positive to make division work properly
 0000013A			_negativeSum:
 0000013A  BB FFFFFFFF			MOV		EBX, -1
 0000013F  F7 E3			MUL		EBX
 00000141  B9 FFFFFFFF			MOV		ECX, -1
 00000146  EB 07			JMP		_getAverage

 00000148			_positiveSum:
 00000148  B9 00000000			MOV		ECX, 0
 0000014D  EB 00			JMP		_getAverage

 0000014F			_getAverage:
 0000014F  51				PUSH	ECX
 00000150  B9 00000000			MOV		ECX, 0
 00000155  BB 0000000A			MOV		EBX, COUNT
 0000015A  BA 00000000			MOV		EDX, 0
 0000015F  F7 F3			DIV		EBX
 00000161  59				POP		ECX
 00000162  83 F9 FF			CMP		ECX, -1
 00000165  74 02			JE		_negativeResult
 00000167  EB 02			JMP		_positiveResult

				; if sum was negative, changes the average back to negative
 00000169			_negativeResult:
 00000169  F7 E1			MUL		ECX

 0000016B			_positiveResult:
 0000016B  A3 0000027D R		MOV		avgInt, EAX
 00000170  BE 0000027D R		MOV		ESI, OFFSET avgInt

 00000175  68 00000271 R	PUSH	OFFSET avgStringRev
 0000017A  68 00000265 R	PUSH	OFFSET avgString
 0000017F  68 0000027D R	PUSH	OFFSET avgInt
 00000184  E8 00000125		Call WriteVal

				; display the average
				mDisplayString		average1
 00000189  52		     1		PUSH	EDX				;Save EDX register
 0000018A  BA 000001C7 R     1		MOV		EDX,  OFFSET average1
 0000018F  E8 00000000 E     1		CALL	WriteString
 00000194  5A		     1		POP		EDX				;Restore EDX
				mDisplayString		avgStringRev
 00000195  52		     1		PUSH	EDX				;Save EDX register
 00000196  BA 00000271 R     1		MOV		EDX,  OFFSET avgStringRev
 0000019B  E8 00000000 E     1		CALL	WriteString
 000001A0  5A		     1		POP		EDX				;Restore EDX
 000001A1  E8 00000000 E	CALL	CrLf

				; display closing message
 000001A6  E8 00000000 E	CALL	CrLf
				mDisplayString		farewell
 000001AB  52		     1		PUSH	EDX				;Save EDX register
 000001AC  BA 000001DF R     1		MOV		EDX,  OFFSET farewell
 000001B1  E8 00000000 E     1		CALL	WriteString
 000001B6  5A		     1		POP		EDX				;Restore EDX
					Invoke ExitProcess,0	; exit to operating system
 000001B7  6A 00	   *	    push   +000000000h
 000001B9  E8 00000000 E   *	    call   ExitProcess
 000001BE			main ENDP

				; --------------------------------------------------------------------------------- 
				; Name: ReadVal
				;  
				; invokes the mGetString macro to get the user to enter a string and then checks if
				; that string can be stored as an integer of 32-bits. if so it stores the value in an
				; array and if not it tells the user it is invalid input
				;
				; Preconditions: the parameters need to be defined, and the macro needs to be created
				;
				; Postconditions: EDI is maintained so iterating through the list can happen
				; 
				; Receives: 
				;	[EBP+28] numList - an array that stores the integer values
				;	[EBP+24] sign - stores the sign of the number as 1 or -1
				;	[EBP+20] error1 - an error message when input is inccorect
				;	[EBP+16] lengthInput - counts the length of the string
				;	[EBP+12] numInput - user entered input as a string
				;	[EBP+8] prompt1 - message to enter a number
				; 
				; Returns: a new value will be stored in the array of integer numbers
				; ---------------------------------------------------------------------------------
 000001BE			ReadVal PROC
 000001BE  55			PUSH	EBP
 000001BF  8B EC		MOV		EBP, ESP
 000001C1  60			PUSHAD
				mGetString		[EBP+8], [EBP+12], MAX_LENGTH, [EBP+16]
 000001C2  52		     1		PUSH	EDX
 000001C3  51		     1		PUSH	ECX
 000001C4  50		     1		PUSH	EAX
 000001C5  8B 55 08	     1		MOV		EDX, [EBP+8]
 000001C8  E8 00000000 E     1		CALL	WriteString
 000001CD  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001D0  B9 0000000C	     1		MOV		ECX, MAX_LENGTH
 000001D5  E8 00000000 E     1		CALL	ReadString
 000001DA  89 45 10	     1		MOV		[EBP+16], EAX
 000001DD  58		     1		POP		EAX
 000001DE  59		     1		POP		ECX
 000001DF  5A		     1		POP		EDX

				; first character we check for a sign "+" or "-" as well as integers
 000001E0			_firstCharacter:
 000001E0  8B 4D 10			MOV		ECX, [EBP+16]
 000001E3  8B 75 0C			MOV		ESI, [EBP+12]
 000001E6  33 C0			XOR		EAX, EAX
 000001E8  FC				CLD
 000001E9  AC				LODSB
 000001EA  3C 00			CMP		AL, 0
 000001EC  74 22			JE		_invalid
 000001EE  3C 2D			CMP		AL, 45
 000001F0  74 0C			JE		_validateString
 000001F2  3C 2B			CMP		AL, 43
 000001F4  74 08			JE		_validateString
 000001F6  3C 30			CMP		AL, 48
 000001F8  7C 16			JL		_invalid
 000001FA  3C 39			CMP		AL, 57
 000001FC  7F 12			JG		_invalid

 000001FE			_validateString:
 000001FE  AC				LODSB
 000001FF  3C 00			CMP		AL, 0
 00000201  74 2D			JE		_stringToInt
 00000203  3C 30			CMP		AL, 48
 00000205  7C 09			JL		_invalid
 00000207  3C 39			CMP		AL, 57
 00000209  7F 05			JG		_invalid
 0000020B  E2 F1			LOOP	_validateString
 0000020D			_invalidPop:
 0000020D  58				POP		EAX ; EAX needs to be popped before moving to _invalid
 0000020E  EB 00			JMP		_invalid
 00000210			_invalid:
					mGetString		[EBP+20], [EBP+12], MAX_LENGTH, [EBP+16]
 00000210  52		     1		PUSH	EDX
 00000211  51		     1		PUSH	ECX
 00000212  50		     1		PUSH	EAX
 00000213  8B 55 14	     1		MOV		EDX, [EBP+20]
 00000216  E8 00000000 E     1		CALL	WriteString
 0000021B  8B 55 0C	     1		MOV		EDX, [EBP+12]
 0000021E  B9 0000000C	     1		MOV		ECX, MAX_LENGTH
 00000223  E8 00000000 E     1		CALL	ReadString
 00000228  89 45 10	     1		MOV		[EBP+16], EAX
 0000022B  58		     1		POP		EAX
 0000022C  59		     1		POP		ECX
 0000022D  5A		     1		POP		EDX
 0000022E  EB B0			JMP		_firstCharacter

 00000230			_stringToInt:
 00000230  8B 4D 10			MOV		ECX, [EBP+16]
 00000233  8B 75 0C			MOV		ESI, [EBP+12]
 00000236  BB 00000000			MOV		EBX, 0
 0000023B  FC				CLD
 0000023C  AC				LODSB
 0000023D  3C 2D			CMP		AL, 45
 0000023F  74 28			JE		_negativeSign
 00000241  3C 2B			CMP		AL, 43
 00000243  74 35			JE		_positiveSign
 00000245  83 E8 30			SUB		EAX, 48
 00000248  50				PUSH	EAX
 00000249  8B C3			MOV		EAX, EBX
 0000024B  BA 0000000A			MOV		EDX, 10
 00000250  F7 E2			MUL		EDX
 00000252  8B D8			MOV		EBX, EAX
 00000254  58				POP		EAX
 00000255  03 D8			ADD		EBX, EAX
 00000257  49				DEC		ECX
 00000258  50				PUSH	EAX ; save eax value so the register can be used to save the sign
 00000259  B8 00000001			MOV		EAX, 1
 0000025E  89 45 18			MOV		[EBP+24], EAX
 00000261  58				POP		EAX		
 00000262  83 F9 00			CMP		ECX, 0
 00000265  74 39			JE		_storeNum
 00000267  EB 1C			JMP		_conversion

 00000269			_negativeSign:
 00000269  B8 FFFFFFFF			MOV		EAX, -1 ; sets the sign to -1
 0000026E  89 45 18			MOV		[EBP+24], EAX
 00000271  49				DEC		ECX
 00000272  8B 75 0C			MOV		ESI, [EBP+12] ; reload the string but load the first byte so it doesn't convert "-"
 00000275  33 C0			XOR		EAX, EAX
 00000277  AC				LODSB
 00000278  EB 0B			JMP		_conversion

 0000027A			_positiveSign:
 0000027A  B8 00000001			MOV		EAX, 1
 0000027F  89 45 18			MOV		[EBP+24], EAX
 00000282  49				DEC		ECX
 00000283  EB 00			JMP		_conversion

 00000285			_conversion:
 00000285  AC				LODSB
 00000286  83 E8 30			SUB		EAX, 48 ; get the numerical value of each string byte
 00000289  50				PUSH	EAX
 0000028A  8B C3			MOV		EAX, EBX
 0000028C  BA 0000000A			MOV		EDX, 10
 00000291  F7 E2			MUL		EDX
 00000293  0F 80 FFFFFF74		JO		_invalidPop ; if overflow flag is set, it's invalid. 
 00000299  8B D8			MOV		EBX, EAX
 0000029B  58				POP		EAX
 0000029C  03 D8			ADD		EBX, EAX
 0000029E  E2 E5			LOOP	_conversion

 000002A0			_storeNum:
 000002A0  8B C3			MOV		EAX, EBX
 000002A2  8B 5D 18			MOV		EBX, [EBP+24]
 000002A5  F7 E3			MUL		EBX
 000002A7  FC				CLD
 000002A8  AB				STOSD ;stores 32-bits from eax in edi and incrememnts edi by 4

 000002A9  61			POPAD
 000002AA  5D			POP		EBP
 000002AB  C2 0018		RET		24
 000002AE			ReadVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: WriteVal
				;  
				; Loads an integer from the numList array and converts it to a string, but backwards.
				; subsequently reverses the string for printing. This is used to display the sum, average
				; and all of the valid input, so receives changes based on what process is being invoked
				; 
				; Preconditions: there must be a value in numList to convert, and it must be verified
				; to be an integer
				; 
				; Receives: 
				;	[EBP+16] numStringRev (for example) - the reversed backwards string (the right one)
				;										  gets printed
				;	[EBP+12] numString (for example) - the string of that integer, but it's backwards
				;	[EBP+8]	numList (for example) - the integer value to be converted 
				;
				; Returns: Returns the backwards and the forwards string. numStringRev is printed but
				; numString never is. these arrays need to be cleared before the procedure can be called 
				; again.
				; ---------------------------------------------------------------------------------
 000002AE			WriteVal PROC

 000002AE  55			PUSH	EBP
 000002AF  8B EC		MOV		EBP, ESP
 000002B1  8B 7D 0C		MOV		EDI, [EBP+12] ; where the string value will be stored
 000002B4  B9 00000000		MOV		ECX, 0

 000002B9  AD			LODSD ;load current array value into eax
 000002BA  50			PUSH	EAX ; for comparison after writing the string backwards
 000002BB  83 F8 00		CMP		EAX, 0
 000002BE  7C 02		JL		_negativeException
 000002C0  EB 08		JMP		_intToString

 000002C2			_negativeException:
 000002C2  BB FFFFFFFF			MOV		EBX, -1 ; temporarily make int positive to make it easier to convert
 000002C7  F7 E3			MUL		EBX
 000002C9  41				INC		ECX

 000002CA			_intToString:
 000002CA  FC				CLD
 000002CB  BB 0000000A			MOV		EBX, 10
 000002D0  BA 00000000			MOV		EDX, 0
 000002D5  F7 F3			DIV		EBX ; get the least significant digit in edx
 000002D7  50				PUSH	EAX ; save the rest of the int
 000002D8  8B C2			MOV		EAX, EDX
 000002DA  83 C0 30			ADD		EAX, 48 ; change the digit to ascii and store in edi
 000002DD  AA				STOSB
 000002DE  58				POP		EAX
 000002DF  41				INC		ECX ; to know string length to reverse it later
 000002E0  83 F8 00			CMP		EAX, 0
 000002E3  7F E5			JG		_intToString

 000002E5  58			POP		EAX
 000002E6  83 F8 00		CMP		EAX, 0
 000002E9  7C 02		JL		_negativebyte
 000002EB  EB 07		JMP		_terminator

 000002ED			_negativebyte:
 000002ED  B8 0000002D			MOV		EAX, "-" ; if integer was negative put a "-" at the end of the backwards string
 000002F2  FC				CLD
 000002F3  AA				STOSB

 000002F4			_terminator:
 000002F4  FC				CLD
 000002F5  B0 00			MOV		AL, 0 ; null terminator for string
 000002F7  AA				STOSB

 000002F8  56			PUSH	ESI
 000002F9  8B 75 0C		MOV		ESI, [EBP+12] ; change what was in edi to esi
 000002FC  03 F1		ADD		ESI, ECX
 000002FE  4E			DEC		ESI
 000002FF  8B 7D 10		MOV		EDI, [EBP+16] ; empty string in edi

				;reverse the string to get the accurate one
 00000302			_reverseBackwardsString:
 00000302  FD				STD
 00000303  AC				LODSB
 00000304  FC				CLD
 00000305  AA				STOSB
 00000306  E2 FA		loop _reverseBackwardsString

 00000308  5E			POP		ESI
 00000309  5D			POP		EBP
 0000030A  C2 000C		RET		12
 0000030D			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    01/23/23 13:31:07
Project 6		(Proj6_millsamu.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000281 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000030D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000001BE _TEXT	Length= 000000F0 Public STDCALL
  _firstCharacter  . . . . . . .	L Near	 000001E0 _TEXT	
  _validateString  . . . . . . .	L Near	 000001FE _TEXT	
  _invalidPop  . . . . . . . . .	L Near	 0000020D _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000210 _TEXT	
  _stringToInt . . . . . . . . .	L Near	 00000230 _TEXT	
  _negativeSign  . . . . . . . .	L Near	 00000269 _TEXT	
  _positiveSign  . . . . . . . .	L Near	 0000027A _TEXT	
  _conversion  . . . . . . . . .	L Near	 00000285 _TEXT	
  _storeNum  . . . . . . . . . .	L Near	 000002A0 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002AE _TEXT	Length= 0000005F Public STDCALL
  _negativeException . . . . . .	L Near	 000002C2 _TEXT	
  _intToString . . . . . . . . .	L Near	 000002CA _TEXT	
  _negativebyte  . . . . . . . .	L Near	 000002ED _TEXT	
  _terminator  . . . . . . . . .	L Near	 000002F4 _TEXT	
  _reverseBackwardsString  . . .	L Near	 00000302 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001BE Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 00000016 _TEXT	
  _displayNums . . . . . . . . .	L Near	 00000060 _TEXT	
  _sum . . . . . . . . . . . . .	L Near	 000000E6 _TEXT	
  _negativeSum . . . . . . . . .	L Near	 0000013A _TEXT	
  _positiveSum . . . . . . . . .	L Near	 00000148 _TEXT	
  _getAverage  . . . . . . . . .	L Near	 0000014F _TEXT	
  _negativeResult  . . . . . . .	L Near	 00000169 _TEXT	
  _positiveResult  . . . . . . .	L Near	 0000016B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 0000000Ah   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_LENGTH . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average1 . . . . . . . . . . . .	Byte	 000001C7 _DATA	
avgInt . . . . . . . . . . . . .	DWord	 0000027D _DATA	
avgStringRev . . . . . . . . . .	Byte	 00000271 _DATA	
avgString  . . . . . . . . . . .	Byte	 00000265 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 000001BA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error1 . . . . . . . . . . . . .	Byte	 00000137 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 000001DF _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lengthInput  . . . . . . . . . .	DWord	 00000241 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list1  . . . . . . . . . . . . .	Byte	 0000018F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInput . . . . . . . . . . . .	Byte	 00000235 _DATA	
numList  . . . . . . . . . . . .	DWord	 000001F5 _DATA	
numStringRev . . . . . . . . . .	Byte	 00000229 _DATA	
numString  . . . . . . . . . . .	Byte	 0000021D _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000116 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sign . . . . . . . . . . . . . .	DWord	 00000245 _DATA	
sum1 . . . . . . . . . . . . . .	Byte	 000001BD _DATA	
sumInt . . . . . . . . . . . . .	DWord	 00000261 _DATA	
sumStringRev . . . . . . . . . .	Byte	 00000255 _DATA	
sumString  . . . . . . . . . . .	Byte	 00000249 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
